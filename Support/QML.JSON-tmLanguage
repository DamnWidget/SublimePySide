// [PackageDev] target_format: plist, ext: tmLanguage
{
  "name": "QML",
  "scopeName": "source.qml",
  "fileTypes": ["qml", "qmlproject"],  
  "uuid": "13a281e0-0507-45b4-bb6c-a57177630f10",

  "patterns": [
    {
      "name": "comment.block.documentation.qml",
      "begin": "/\\*(?!/)",
      "end": "\\*/",
      "comment": "Block comment."
    },

    {
      "name": "comment.line.double-slash.qml",
      "match": "//.*$",
      "comment": "Line comment."
    },

    {
      "name": "meta.import.qml",
      "begin": "\\b(import)\\s+",
      "beginCaptures": {
        "1": { "name": "keyword.other.import.qml" }
      },
      "patterns": [
        {
          "name": "meta.import.namespace.qml",
          "match": "([\\w\\d\\.]+)\\s+(\\d+\\.\\d+)(?:\\s+(as)\\s+([A-Z][\\w\\d]*))?",
          "captures": {
            "1": { "name": "entity.name.class.qml" },
            "2": { "name": "constant.numeric.qml" },
            "3": { "name": "keyword.other.import.qml" },
            "4": { "name": "entity.name.class.qml" }
          },
          "comment": "import Namespace VersionMajor.VersionMinor [as SingletonTypeIdentifier]"
        },
        {
          "name": "meta.import.dirjs.qml",
          "match": "(\\\"[^\\\"]+\\\")(?:\\s+(as)\\s+([A-Z][\\w\\d]*))?",
          "captures": {
            "1": { "name": "string.quoted.double.qml" },
            "2": { "name": "keyword.other.import.qml" },
            "3": { "name": "entity.name.class.qml" }
          },
          "comment": "import <string> [as Script]"
        }
      ],
      "end": "$",
      "comment": "import statement."
    },

    {
      "name": "support.class.qml",
      "match": "\\b[A-Z]\\w*\\b",
      "comment": "Capitalized word (class or enum)."
    },

    {
      "name": "support.class.qml",
      "match": "(((^|\\{)\\s*)|\\b)on[A-Z]\\w*\\b",
      "comment": "onSomething - handler."
    },

    {
      "name": "meta.id.qml",
      "match": "(?:^|\\{)\\s*(id)\\s*\\:\\s*([^;\\s]+)\\b",
      "captures": {
          "1": { "name": "keyword.other.qml" },
          "2": { "name": "storage.modifier.qml" }
      },
      "comment": "id: <something>"
    },

    {
      "name": "meta.propertydef.qml",
      "match": "^\\s*(?:(default|readonly)\\s+)?(property)\\s+(?:(alias)|([\\w\\<\\>]+))\\s+(\\w+)",
      "captures": {
        "1": { "name": "keyword.other.qml" },
        "2": { "name": "keyword.other.qml" },
        "3": { "name": "keyword.other.qml" },
        "4": { "name": "storage.type.qml" },
        "5": { "name": "entity.other.attribute-name.qml" }
      },
      "comment": "property definition."
    },

    {
      "name": "meta.signal.qml",
      "begin": "\\b(signal)\\s+(\\w+)\\s*",
      "beginCaptures": {
        "1": {"name": "keyword.other.qml"},
        "2": {"name": "support.function.qml"}
      },
      "patterns": [
        {
          "name": "meta.signal.parameters.qml",
          "match": "(\\w+)\\s+(\\w+)",
          "captures": {
               "1": { "name": "storage.type.qml" },
               "2": { "name": "variable.parameter.qml" }
           }
        }
      ],
      "end": ";|(?=/)|$",
      "comment": "signal <signalName>[([<type> <parameter>[, ...]])]"
    },

    {
      "name": "meta.keyword.qml",
      "match": "(?:\\b|\\s+)(?:(true|false|null|undefined)|(var|void)|(on|as|enum|connect|break|case|catch|continue|debugger|default|delete|do|else|finally|for|if|in|instanceof|new|return|switch|this|throw|try|typeof|while|with))\\b",
      "captures": {
          "1": { "name": "constant.language.qml" },
          "2": { "name": "storage.type.qml" },
          "3": { "name": "keyword.control.qml" }
      },
      "comment": "js keywords."
    },

    {
      "name": "meta.function.qml",
      "match": "\\b(function)\\s+([\\w_]+)\\s*(?=\\()",
      "captures": {
          "1": { "name": "storage.type.qml" },
          "2": { "name": "entity.name.function.untitled" }
      },
      "comment": "function definition."
    },

    {
      "name": "support.function.qml",
      "match": "\\b[\\w_]+\\s*(?=\\()",
      "comment": "function call."
    },

    {
      "name": "entity.other.attribute-name.qml",
      "match": "(?:^|\\{|;)\\s*[a-z][\\w\\.]*\\s*(?=\\:)",
      "comment": "property  (property: <something>)."
    },

    {
      "name": "entity.other.attribute-name.qml",
      "match": "(?<=\\.)\\b\\w*",
      "comment": "property of the variable (name.property)."
    },
    {
      "name": "variable.parameter",
      "match": "\\b([a-z_]\\w*)\\b",
      "comment": "All non colored words are assumed to be variables."
    },

    {"include": "source.js" }
  ]
}
